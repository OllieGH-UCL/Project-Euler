## Hello! 

import numpy as np 
print("Hello Ipad")

###############
## Problem 1 - If we list all the natural number below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples are 23. find the sum of all multiples or 3 or 5 below 1000. 
###############

#### MY SOLUTION 
values_1000 = np.linspace(1, 999, 999, float)    
    # "bwloe 100" ... so therefore no inclusive, otherwise over estimates final sum 
print("Last 10 value: ", values_1000[-10:-1], "\nFirst 10 values: ", values_1000[0:10])

multiples_three = []
multiples_five = []

for n in values_1000:
    if n%3 == 0 or n%5 == 0 :    # n is exactly divisibale by x
        multiples_three.append(n)

sm = sum(multiples_three)
print(sm)

#### PERPLEXITY SOLUTION 

#limit = 10
#results = sum(n in limit if n%3 == 0 or n%5 == 0 else pass) 


###############
## Problem 2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose valuse do not exceed four million, find the sum of the even-valued terms. 
###############

#### MY SOLUTION 

fib = np.array([1,2])
#print(fib.append(1))

#for n in fib:
#    s = fib[-2] + fib[-1]
#    fib.append(n)

#print(fib)